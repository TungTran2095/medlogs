'use server';

/**
 * @fileOverview Chat functionality with attendance data integration.
 * 
 * - attendanceChat - A function that processes chat messages with attendance data queries.
 * - AttendanceChatInput - The input type for the attendanceChat function.
 * - AttendanceChatOutput - The return type for the attendanceChat function.
 */

import { ai } from '@/ai/genkit';
import { z } from 'genkit';
import { 
  queryAttendanceData, 
  getAttendanceStats, 
  searchEmployees, 
  getAllOffices, 
  getAllAttendanceStatuses,
  getAttendanceByDateRange,
  type AttendanceQuery 
} from '@/app/attendance-query-actions';

const AttendanceChatInputSchema = z.object({
  prompt: z.string().describe('The user prompt or question about attendance data.'),
  userId: z.string().describe('The user ID for context.'),
});

export type AttendanceChatInput = z.infer<typeof AttendanceChatInputSchema>;

const AttendanceChatOutputSchema = z.object({
  reply: z.string().describe('The AI response to the user query.'),
  hasData: z.boolean().describe('Whether the response contains data.'),
  attendanceData: z.any().optional().describe('Attendance data if relevant to the query.'),
});

export type AttendanceChatOutput = z.infer<typeof AttendanceChatOutputSchema>;

/**
 * Ph√¢n t√≠ch prompt ƒë·ªÉ x√°c ƒë·ªãnh lo·∫°i query attendance
 */
function analyzeAttendanceQuery(prompt: string): {
  queryType: 'stats' | 'search' | 'list' | 'general';
  query: AttendanceQuery;
  searchTerm?: string;
} {
  const lowerPrompt = prompt.toLowerCase();
  
  // X√°c ƒë·ªãnh lo·∫°i query
  if (lowerPrompt.includes('th·ªëng k√™') || lowerPrompt.includes('s·ªë li·ªáu') || lowerPrompt.includes('b√°o c√°o')) {
    return { queryType: 'stats', query: {} };
  }
  
  if (lowerPrompt.includes('t√¨m') || lowerPrompt.includes('search') || lowerPrompt.includes('nh√¢n vi√™n')) {
    // Extract search term
    const searchMatch = prompt.match(/['"]([^'"]+)['"]|t√¨m\s+(.+?)(?:\s|$)/i);
    const searchTerm = searchMatch ? (searchMatch[1] || searchMatch[2]) : '';
    return { queryType: 'search', query: {}, searchTerm };
  }
  
  if (lowerPrompt.includes('danh s√°ch') || lowerPrompt.includes('list')) {
    return { queryType: 'list', query: {} };
  }
  
  // Default to general query
  return { queryType: 'general', query: {} };
}

/**
 * X·ª≠ l√Ω attendance query v√† tr·∫£ v·ªÅ d·ªØ li·ªáu
 */
async function processAttendanceQuery(prompt: string): Promise<{ data?: any; error?: string }> {
  try {
    const { queryType, query, searchTerm } = analyzeAttendanceQuery(prompt);
    
    console.log('Analyzed query:', { queryType, query, searchTerm });
    
    switch (queryType) {
      case 'stats':
        console.log('Processing stats query...');
        const statsResult = await getAttendanceStats(query);
        console.log('Stats result:', statsResult);
        return statsResult;
        
      case 'search':
        if (searchTerm) {
          console.log('Processing search query for:', searchTerm);
          const searchResult = await searchEmployees(searchTerm);
          console.log('Search result:', searchResult);
          return searchResult;
        }
        return { error: 'Kh√¥ng t√¨m th·∫•y t·ª´ kh√≥a t√¨m ki·∫øm' };
        
      case 'list':
        console.log('Processing list query...');
        // L·∫•y danh s√°ch offices v√† statuses
        const [officesResult, statusesResult] = await Promise.all([
          getAllOffices(),
          getAllAttendanceStatuses()
        ]);
        
        console.log('List results:', { officesResult, statusesResult });
        
        return {
          data: {
            offices: officesResult.data || [],
            statuses: statusesResult.data || []
          }
        };
        
      default:
        console.log('Processing general query...');
        // For general queries, try to get basic stats
        const generalStatsResult = await getAttendanceStats({ limit: 100 });
        return generalStatsResult;
    }
  } catch (error: any) {
    console.error('Process attendance query error:', error);
    return { error: error.message || 'Kh√¥ng th·ªÉ x·ª≠ l√Ω truy v·∫•n ch·∫•m c√¥ng' };
  }
}

export async function attendanceChat(input: AttendanceChatInput): Promise<AttendanceChatOutput> {
  try {
    const { prompt, userId } = input;
    
    console.log('Attendance chat input:', { prompt, userId });
    
    // X·ª≠ l√Ω attendance query
    const queryResult = await processAttendanceQuery(prompt);
    
    console.log('Query result:', queryResult);
    
    // T·∫°o context cho AI
    let dataContext = '';
    let hasData = false;
    
    if (queryResult.data) {
      hasData = true;
      dataContext = `\n\nD·ªØ li·ªáu ch·∫•m c√¥ng:\n${JSON.stringify(queryResult.data, null, 2)}`;
      console.log('Has data:', hasData, 'Data context length:', dataContext.length);
    }
    
    if (queryResult.error) {
      dataContext = `\n\nL·ªói truy v·∫•n d·ªØ li·ªáu: ${queryResult.error}`;
      console.log('Query error:', queryResult.error);
    }

    console.log('Processing attendance query for prompt:', prompt);

    // T·∫°o response ƒë∆°n gi·∫£n t·ª´ d·ªØ li·ªáu
    let reply = 'Kh√¥ng c√≥ d·ªØ li·ªáu ch·∫•m c√¥ng.';
    
    if (queryResult.data) {
      // Format d·ªØ li·ªáu th√†nh response d·ªÖ ƒë·ªçc
      const data = queryResult.data;
      
      if (data.byStatus) {
        // Th·ªëng k√™ theo tr·∫°ng th√°i
        reply = `üìä **Th·ªëng k√™ ch·∫•m c√¥ng h√¥m nay:**\n\n`;
        reply += `üìà **T·ªïng s·ªë b·∫£n ghi:** ${data.totalRecords}\n\n`;
        reply += `üìã **Ph√¢n b·ªë theo tr·∫°ng th√°i:**\n`;
        
        // S·∫Øp x·∫øp theo s·ªë l∆∞·ª£ng gi·∫£m d·∫ßn
        const sortedStatuses = Object.entries(data.byStatus)
          .sort(([,a], [,b]) => (b as number) - (a as number));
        
        sortedStatuses.forEach(([status, count]) => {
          const percentage = ((count as number) / data.totalRecords * 100).toFixed(1);
          reply += `‚Ä¢ **${status}:** ${count} (${percentage}%)\n`;
        });
        
        if (data.byOffice) {
          reply += `\nüè¢ **Top 10 ƒë∆°n v·ªã c√≥ nhi·ªÅu b·∫£n ghi nh·∫•t:**\n`;
          const sortedOffices = Object.entries(data.byOffice)
            .sort(([,a], [,b]) => (b as number) - (a as number))
            .slice(0, 10);
          
          sortedOffices.forEach(([office, count]) => {
            reply += `‚Ä¢ **${office}:** ${count}\n`;
          });
        }
        
        reply += `\nüí° **Insights:**\n`;
        const topStatus = sortedStatuses[0];
        if (topStatus) {
          reply += `- Tr·∫°ng th√°i ph·ªï bi·∫øn nh·∫•t: **${topStatus[0]}** (${topStatus[1]} b·∫£n ghi)\n`;
        }
        
        const validCount = data.byStatus['H·ª£p l·ªá'] || 0;
        const validPercentage = (validCount / data.totalRecords * 100).toFixed(1);
        reply += `- T·ª∑ l·ªá ch·∫•m c√¥ng h·ª£p l·ªá: **${validPercentage}%** (${validCount}/${data.totalRecords})\n`;
        
        const lateCount = data.byStatus['ƒêi mu·ªôn'] || 0;
        const latePercentage = (lateCount / data.totalRecords * 100).toFixed(1);
        reply += `- T·ª∑ l·ªá ƒëi mu·ªôn: **${latePercentage}%** (${lateCount}/${data.totalRecords})\n`;
      } else if (Array.isArray(data)) {
        // K·∫øt qu·∫£ t√¨m ki·∫øm nh√¢n vi√™n
        reply = `üîç **K·∫øt qu·∫£ t√¨m ki·∫øm nh√¢n vi√™n:**\n\n`;
        if (data.length === 0) {
          reply += `Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n n√†o.`;
        } else {
          reply += `T√¨m th·∫•y **${data.length}** nh√¢n vi√™n:\n\n`;
          data.slice(0, 10).forEach((employee, index) => {
            reply += `${index + 1}. **${employee.fullName}** (M√£: ${employee.userCode})\n`;
            reply += `   ƒê∆°n v·ªã: ${employee.officeName}\n\n`;
          });
          if (data.length > 10) {
            reply += `... v√† ${data.length - 10} nh√¢n vi√™n kh√°c.`;
          }
        }
      } else if (data.offices && data.statuses) {
        // Danh s√°ch offices v√† statuses
        reply = `üìã **Danh s√°ch h·ªá th·ªëng:**\n\n`;
        reply += `üè¢ **ƒê∆°n v·ªã (${data.offices.length} ƒë∆°n v·ªã):**\n`;
        data.offices.slice(0, 10).forEach((office, index) => {
          reply += `${index + 1}. ${office}\n`;
        });
        if (data.offices.length > 10) {
          reply += `... v√† ${data.offices.length - 10} ƒë∆°n v·ªã kh√°c.\n\n`;
        }
        
        reply += `\nüìä **Tr·∫°ng th√°i ch·∫•m c√¥ng (${data.statuses.length} tr·∫°ng th√°i):**\n`;
        data.statuses.forEach((status, index) => {
          reply += `${index + 1}. ${status}\n`;
        });
      }
    } else if (queryResult.error) {
      reply = `‚ùå **L·ªói:** ${queryResult.error}`;
    }
    
    console.log('Generated reply:', reply);

    return {
      reply,
      hasData,
      attendanceData: queryResult.data,
    };
  } catch (error: any) {
    console.error('Attendance chat error:', error);
    return {
      reply: 'Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω c√¢u h·ªèi v·ªÅ ch·∫•m c√¥ng.',
      hasData: false,
    };
  }
}

const attendanceChatPrompt = ai.definePrompt({
  name: 'attendanceChatPrompt',
  input: { schema: AttendanceChatInputSchema },
  output: { schema: AttendanceChatOutputSchema },
  prompt: `B·∫°n l√† tr·ª£ l√Ω AI chuy√™n v·ªÅ d·ªØ li·ªáu ch·∫•m c√¥ng. Tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng v·ªÅ d·ªØ li·ªáu ch·∫•m c√¥ng m·ªôt c√°ch h·ªØu √≠ch v√† chi ti·∫øt.

Ng∆∞·ªùi d√πng h·ªèi: {{{prompt}}}
User ID: {{{userId}}}

Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát m·ªôt c√°ch t·ª± nhi√™n v√† h·ªØu √≠ch.`,
});

const attendanceChatFlow = ai.defineFlow(
  {
    name: 'attendanceChatFlow',
    inputSchema: AttendanceChatInputSchema,
    outputSchema: AttendanceChatOutputSchema,
  },
  async input => {
    return await attendanceChat(input);
  }
);

export { attendanceChatFlow };
